{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDeleteClick","state","activeNumber","length","setState","substr","preventZoom","e","t2","timeStamp","dt","currentTarget","dataset","lastTouch","fingers","touches","preventDefault","activeBtn","genQrCode","prevProps","prevState","concat","nextActiveBtn","num","bwipjs","_canvas","bcid","text","getQrCodeText","height","width","includetext","textxalign","err","cvs","_this2","react_default","a","createElement","className","style","maxWidth","ref","disabled","onClick","setActiveBtn","bind","type","checked","id","name","readOnly","htmlFor","handleNumpadClick","onTouchStart","textIndent","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7edb389d.chunk.js","sourcesContent":["/* @flow */\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport React, { Component } from 'react';\nimport bwipjs from 'bwip-js';\n\ntype Props = {};\n\ntype State = {\n  activeBtn: string,\n  activeNumber: string,\n};\n\nclass App extends Component<Props, State> {\n  _canvas: ?HTMLCanvasElement;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      activeBtn: 'BIN',\n      activeNumber: '',\n    };\n  }\n\n  componentDidMount() {\n    this.genQrCode();\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (\n      this.state.activeBtn !== prevState.activeBtn ||\n      this.state.activeNumber !== prevState.activeNumber\n    ) {\n      this.genQrCode();\n    }\n  }\n\n  getQrCodeText() {\n    return `${this.state.activeBtn}:${this.state.activeNumber}`;\n  }\n\n  setActiveBtn(nextActiveBtn: string) {\n    // Choosing a new type should also reset the number because there's little chance you want the\n    // same number for that other type.\n    this.setState({\n      activeBtn: nextActiveBtn,\n      activeNumber: '',\n    });\n  }\n\n  handleNumpadClick(num: number) {\n    this.setState({\n      activeNumber: `${this.state.activeNumber}${num}`,\n    });\n  }\n\n  handleDeleteClick = () => {\n    // Can't delete if there's no number.\n    if (this.state.activeNumber.length === 0) return;\n    this.setState({\n      activeNumber: this.state.activeNumber.substr(0, this.state.activeNumber.length - 1),\n    });\n  };\n\n  genQrCode() {\n    bwipjs(\n      this._canvas,\n      {\n        bcid: 'qrcode', // Barcode type\n        text: this.getQrCodeText(), // Text to encode\n        height: 40, // Bar height, in millimeters\n        width: 40,\n        includetext: true, // Show human-readable text\n        textxalign: 'center', // Always good to set this\n      },\n      function(err, cvs) {\n        if (err) {\n          // Decide how to handle the error\n          // `err` may be a string or Error object\n        } else {\n          // Nothing else to do in this example...\n        }\n      }\n    );\n  }\n\n  preventZoom = e => {\n    const t2 = e.timeStamp;\n    const t1 = e.currentTarget.dataset.lastTouch || t2;\n    const dt = t2 - t1;\n    const fingers = e.touches.length;\n    e.currentTarget.dataset.lastTouch = t2;\n\n    if (!dt || dt > 500 || fingers > 1) return; // not double-tap\n\n    e.preventDefault();\n  };\n\n  render() {\n    return (\n      <div className=\"container text-center\" style={{ maxWidth: '540px' }}>\n        <canvas\n          className=\"mt-3\"\n          ref={ref => {\n            this._canvas = ref;\n          }}\n        />\n        <h5 className=\"mt-2\">\n          <pre className=\"mb-0\">\n            {this.getQrCodeText()}\n            <span className=\"cursor\" />\n          </pre>\n        </h5>\n        <div className=\"row\">\n          <div className=\"col my-1\">\n            <button\n              className=\"btn btn-rounded btn-sm btn-danger\"\n              disabled={this.state.activeBtn === 'BIN'}\n              onClick={this.setActiveBtn.bind(this, 'BIN')}\n              type=\"button\">\n              <div className=\"form-check\">\n                <input\n                  checked={this.state.activeBtn === 'BIN'}\n                  className=\"form-check-input mr-1\"\n                  id=\"resource-type-bin\"\n                  name=\"resource-type\"\n                  readOnly\n                  type=\"radio\"\n                />\n                <label className=\"form-check-label pr-2\" htmlFor=\"resource-type-bin\">\n                  BIN\n                </label>\n              </div>\n            </button>\n          </div>\n          <div className=\"col my-1\">\n            <button\n              className=\"btn btn-rounded btn-sm btn-secondary\"\n              disabled={this.state.activeBtn === 'CASE'}\n              onClick={this.setActiveBtn.bind(this, 'CASE')}\n              type=\"button\">\n              <div className=\"form-check\">\n                <input\n                  checked={this.state.activeBtn === 'CASE'}\n                  className=\"form-check-input mr-1\"\n                  id=\"resource-type-case\"\n                  name=\"resource-type\"\n                  readOnly\n                  type=\"radio\"\n                />\n                <label className=\"form-check-label\" htmlFor=\"resource-type-case\">\n                  CASE\n                </label>\n              </div>\n            </button>\n          </div>\n          <div className=\"col my-1\">\n            <button\n              className=\"btn btn-rounded btn-sm btn-primary\"\n              disabled={this.state.activeBtn === 'TRAY'}\n              onClick={this.setActiveBtn.bind(this, 'TRAY')}\n              type=\"button\">\n              <div className=\"form-check\">\n                <input\n                  checked={this.state.activeBtn === 'TRAY'}\n                  className=\"form-check-input mr-1\"\n                  id=\"resource-type-tray\"\n                  name=\"resource-type\"\n                  readOnly\n                  type=\"radio\"\n                />\n                <label className=\"form-check-label\" htmlFor=\"resource-type-tray\">\n                  TRAY\n                </label>\n              </div>\n            </button>\n          </div>\n          <div className=\"col my-1\">\n            <button\n              className=\"btn btn-rounded btn-sm btn-success\"\n              disabled={this.state.activeBtn === 'STATION'}\n              onClick={this.setActiveBtn.bind(this, 'STATION')}\n              type=\"button\">\n              <div className=\"form-check\">\n                <input\n                  checked={this.state.activeBtn === 'STATION'}\n                  className=\"form-check-input mr-1\"\n                  id=\"resource-type-station\"\n                  name=\"resource-type\"\n                  readOnly\n                  type=\"radio\"\n                />\n                <label className=\"form-check-label\" htmlFor=\"resource-type-station\">\n                  STATION\n                </label>\n              </div>\n            </button>\n          </div>\n          <div className=\"col my-1\">\n            <button\n              className=\"btn btn-rounded btn-sm btn-warning\"\n              disabled={this.state.activeBtn === 'CROP'}\n              onClick={this.setActiveBtn.bind(this, 'CROP')}\n              type=\"button\">\n              <div className=\"form-check\">\n                <input\n                  checked={this.state.activeBtn === 'CROP'}\n                  className=\"form-check-input mr-1\"\n                  id=\"resource-type-crop\"\n                  name=\"resource-type\"\n                  readOnly\n                  type=\"radio\"\n                />\n                <label className=\"form-check-label\" htmlFor=\"resource-type-crop\">\n                  CROP\n                </label>\n              </div>\n            </button>\n          </div>\n        </div>\n        <div className=\"mt-3 mx-auto\" style={{ width: '240px' }}>\n          <div className=\"row\">\n            <div className=\"col\">\n              <button\n                className=\"btn btn-dark btn-round btn-lg\"\n                onClick={this.handleNumpadClick.bind(this, 1)}\n                onTouchStart={this.preventZoom}>\n                1\n              </button>\n            </div>\n            <div className=\"col\">\n              <button\n                className=\"btn btn-dark btn-round btn-lg\"\n                onClick={this.handleNumpadClick.bind(this, 2)}\n                onTouchStart={this.preventZoom}>\n                2\n              </button>\n            </div>\n            <div className=\"col\">\n              <button\n                className=\"btn btn-dark btn-round btn-lg\"\n                onClick={this.handleNumpadClick.bind(this, 3)}\n                onTouchStart={this.preventZoom}>\n                3\n              </button>\n            </div>\n          </div>\n          <div className=\"row mt-3\">\n            <div className=\"col\">\n              <button\n                className=\"btn btn-dark btn-round btn-lg\"\n                onClick={this.handleNumpadClick.bind(this, 4)}\n                onTouchStart={this.preventZoom}>\n                4\n              </button>\n            </div>\n            <div className=\"col\">\n              <button\n                className=\"btn btn-dark btn-round btn-lg\"\n                onClick={this.handleNumpadClick.bind(this, 5)}\n                onTouchStart={this.preventZoom}>\n                5\n              </button>\n            </div>\n            <div className=\"col\">\n              <button\n                className=\"btn btn-dark btn-round btn-lg\"\n                onClick={this.handleNumpadClick.bind(this, 6)}\n                onTouchStart={this.preventZoom}>\n                6\n              </button>\n            </div>\n          </div>\n          <div className=\"row mt-3\">\n            <div className=\"col\">\n              <button\n                className=\"btn btn-dark btn-round btn-lg\"\n                onClick={this.handleNumpadClick.bind(this, 7)}\n                onTouchStart={this.preventZoom}>\n                7\n              </button>\n            </div>\n            <div className=\"col\">\n              <button\n                className=\"btn btn-dark btn-round btn-lg\"\n                onClick={this.handleNumpadClick.bind(this, 8)}\n                onTouchStart={this.preventZoom}>\n                8\n              </button>\n            </div>\n            <div className=\"col\">\n              <button\n                className=\"btn btn-dark btn-round btn-lg\"\n                onClick={this.handleNumpadClick.bind(this, 9)}\n                onTouchStart={this.preventZoom}>\n                9\n              </button>\n            </div>\n          </div>\n          <div className=\"row mt-3\">\n            <div className=\"col\" />\n            <div className=\"col\">\n              <button\n                className=\"btn btn-dark btn-round btn-lg\"\n                onClick={this.handleNumpadClick.bind(this, 0)}\n                onTouchStart={this.preventZoom}>\n                0\n              </button>\n            </div>\n            <div className=\"col\">\n              <button\n                className=\"btn btn-dark btn-round btn-lg\"\n                disabled={this.state.activeNumber === ''}\n                onClick={this.handleDeleteClick}\n                onTouchStart={this.preventZoom}\n                style={{ textIndent: '-3px' }}>\n                ⌫\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}